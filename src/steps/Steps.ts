import { allure } from 'allure-mocha/runtime';
import CoreApi from '../http/CoreApi';
import { assert } from 'chai';
import { AxiosResponse } from 'axios';
import { Cat, CatsList } from '../../@types/common';

export default class Steps {
  public static common = {
    stepGetCatById: Steps.getCatById,
    equal: Steps.equal,
    allByLetter: Steps.allByLetter,
    searchCatByPartName: Steps.searchCatByPartName,
    removeCat: Steps.removeCat
  };
  private static async getCatById(id: number): Promise<AxiosResponse<{ cat: Cat }>> {
    return await allure.step(`–≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /get-by-id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${id}`, async () => {
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /get-by-id');
      const response = await CoreApi.getCatById(id);
      const data = JSON.stringify(response.data, null, 2);
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id:\n', data);
      allure.attachment('attachment', data, 'application/json');
      console.info('—Ç–µ—Å—Ç 2 üöÄ:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /get-by-id:\n', response.data);
      return response;
    });
  }

  private static async equal(exp: any, act: any) {
    return await allure.step('–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏–π', () => {
      allure.attachment('expected', exp, 'text/plain');
      allure.attachment('actual', act, 'text/plain');
      assert.equal(exp, act, '–ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç');
    });
  }

  private static async allByLetter(limit: number = 10): Promise<AxiosResponse<{
    groups: { title: string; cats: Cat[]; count_in_group: number; count_by_letter: number } [];
    count_output: number;
    count_all: number }>> {
    return await allure.step(`–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /allByLetter`, async () => {
      console.info('–ü–æ–∏—Å–∫ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ–≤:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /allByLetter');
      const response = await CoreApi.allByLetter();
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('response /allByLetter', data, 'application/json');
      console.info('–ü–æ–∏—Å–∫ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ–≤:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /allByLetter:\n', response.data);
      return response;
    });
  }

  private static async searchCatByPartName(name: string, limit: number, offset: number): Promise<AxiosResponse<CatsList>> {
    return await allure.step(`–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å GET /search-pattern —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ name=${name}, limit=${limit}, offset=${offset}`, async () => {
      console.info('–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å GET /search-pattern —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ name='+name+', limit='+limit+', offset='+offset);
      const response = await CoreApi.searchCatByPartName(name, limit, offset);
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('response /search-pattern', data, 'application/json');
      console.info('–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /search-pattern:\n', response.data);
      return response;
    });
  }

  private static async removeCat(id: number): Promise<AxiosResponse<Cat>> {
    return await allure.step(`–£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞`, async () => {
      console.info('–£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞:', '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å DELETE /remove —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º id=', id);
      const response = await CoreApi.removeCat(id);
      const data = JSON.stringify(response.data, null, 2);
      allure.attachment('response /remove', data, 'application/json');
      console.info('–£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞:', '–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å DELETE /remove:\n', response.data);
      return response;
    });
  }
}